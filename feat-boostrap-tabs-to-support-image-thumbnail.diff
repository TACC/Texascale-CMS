diff --git a/cms/Dockerfile b/cms/Dockerfile
index 20300ac8..9614618e 100644
--- a/cms/Dockerfile
+++ b/cms/Dockerfile
@@ -2,5 +2,6 @@ FROM taccwma/core-cms:feat-allow-custom-sites-to-overwrite-app-templates
 
 WORKDIR /code
 
+COPY /src/texascale_custom /code/texascale_custom
 COPY /src/taccsite_custom /code/taccsite_custom
 COPY /src/taccsite_cms /code/taccsite_cms
diff --git a/cms/docker-compose.dev.yml b/cms/docker-compose.dev.yml
index d8b8cfd0..5880db0c 100644
--- a/cms/docker-compose.dev.yml
+++ b/cms/docker-compose.dev.yml
@@ -8,6 +8,7 @@ services:
     hostname: core_cms
     volumes:
       - ./src/taccsite_custom:/code/taccsite_custom
+      - ./src/texascale_custom:/code/texascale_custom
       - ./src/taccsite_cms/custom_app_settings.py:/code/taccsite_cms/custom_app_settings.py
       - ./src/taccsite_cms/urls_custom.py:/code/taccsite_cms/urls_custom.py
       - ./src/taccsite_cms/settings_custom.py:/code/taccsite_cms/settings_custom.py
diff --git a/cms/src/taccsite_cms/custom_app_settings.py b/cms/src/taccsite_cms/custom_app_settings.py
index 8f65fdc5..8635511b 100644
--- a/cms/src/taccsite_cms/custom_app_settings.py
+++ b/cms/src/taccsite_cms/custom_app_settings.py
@@ -1,5 +1,9 @@
 CUSTOM_APPS = [
 
+    # TEXASCALE_CUSTOM
+    # !!!: Independent app to customize site cuz texascale_cms did not let me
+    'texascale_custom.apps.TexascaleCustomConfig',
+
     # DJANGOCMS_BLOG
     'parler',
     'taggit',
@@ -10,4 +14,5 @@ CUSTOM_APPS = [
 ]
 
 CUSTOM_MIDDLEWARE = []
+
 STATICFILES_DIRS = ()
diff --git a/cms/src/taccsite_custom/templates/djangocms_bootstrap4/tabs/default/tabs.html b/cms/src/taccsite_custom/templates/djangocms_bootstrap4/tabs/default/tabs.html
new file mode 100644
index 00000000..5db02664
--- /dev/null
+++ b/cms/src/taccsite_custom/templates/djangocms_bootstrap4/tabs/default/tabs.html
@@ -0,0 +1,50 @@
+{# https://github.com/django-cms/djangocms-bootstrap4/blob/3.0.2/djangocms_bootstrap4/contrib/bootstrap4_tabs/templates/djangocms_bootstrap4/tabs/default/tabs.html #}
+{% load cms_tags %}
+
+{# TACC (support image content): #}
+{% include "./tabs_styles.html" %}
+{# /TACC #}
+
+<{{ instance.tag_type }} {{ instance.attributes_str }}>
+    <ul class="nav {{ instance.tab_type }}
+        {% if instance.tab_alignment %} {{ instance.tab_alignment }}{% endif %}"
+        role="tablist">
+        {% for plugin in instance.child_plugin_instances %}
+            <li class="nav-item">
+                <a href="#tab-{{ plugin.pk }}"
+                    class="nav-link{% if instance.tab_index == forloop.counter %} active{% endif %}"
+                    id="tab-label-{{ plugin.pk }}"
+                    data-toggle="tab"
+                    aria-controls="tab-{{ plugin.pk }}"
+                    aria-selected="{% if instance.tab_index == forloop.counter %}true{% else %}false{% endif %}"
+                    role="tab">
+                    {# TACC (support image content): #}
+                    {# {{ plugin.tab_title }} #}
+                    {% if plugin.tab_image %}
+                        {% include "./tabs_image.html" with instance=plugin.tab_image %}
+                        <span class="sr-only">
+                            {{ plugin.tab_title }}
+                        </span>
+                    {% else %}
+                        {{ plugin.tab_title }}
+                    {# TACC (support image content): #}
+                    {% endif %}
+                    {# /TACC #}
+                </a>
+            </li>
+        {% endfor %}
+    </ul>
+
+    <div class="tab-content">
+        {% for plugin in instance.child_plugin_instances %}
+            <div class="tab-pane
+                {% if instance.tab_index == forloop.counter %} show active{% endif %}
+                {% if instance.tab_effect %}{{ instance.tab_effect }}{% endif %}"
+                id="tab-{{ plugin.pk }}"
+                aria-labelledby="tab-label-{{ plugin.pk }}"
+                role="tabpanel">
+                {% render_plugin plugin %}
+            </div>
+        {% endfor %}
+    </div>
+</{{ instance.tag_type }}>
\ No newline at end of file
diff --git a/cms/src/taccsite_custom/templates/djangocms_bootstrap4/tabs/default/tabs_image.html b/cms/src/taccsite_custom/templates/djangocms_bootstrap4/tabs/default/tabs_image.html
new file mode 100644
index 00000000..5953e576
--- /dev/null
+++ b/cms/src/taccsite_custom/templates/djangocms_bootstrap4/tabs/default/tabs_image.html
@@ -0,0 +1,11 @@
+{# https://github.com/django-cms/djangocms-picture/blob/3.0.0/djangocms_picture/templates/djangocms_picture/default/picture.html#L16-L35 #}
+
+<img src="{{ instance.url }}"
+    alt="{% if instance.attributes.alt %}{{ instance.attributes.alt }}{% elif instance.picture.default_alt_text %}{{ instance.picture.default_alt_text }}{% endif %}"
+    {% if instance.width %} width="{{ instance.width }}"{% endif %}
+    {% if instance.height %} height="{{ instance.height }}"{% endif %}
+    {# TACC: (no need for responsive image attributes) #}
+    {# ... #}
+    {# /TACC #}
+    {% if instance.attributes_str %}{{ instance.attributes_str }}{% endif %}
+>
diff --git a/cms/src/taccsite_custom/templates/djangocms_bootstrap4/tabs/default/tabs_styles.html b/cms/src/taccsite_custom/templates/djangocms_bootstrap4/tabs/default/tabs_styles.html
new file mode 100644
index 00000000..30fdce4c
--- /dev/null
+++ b/cms/src/taccsite_custom/templates/djangocms_bootstrap4/tabs/default/tabs_styles.html
@@ -0,0 +1,5 @@
+<style id="djangocms-bootstrap4-tabs-style">
+    .nav-tabs .nav-link img {
+        width: 100px;
+    }
+</style>
\ No newline at end of file
diff --git a/cms/src/texascale_custom/__init__.py b/cms/src/texascale_custom/__init__.py
new file mode 100755
index 00000000..73695026
--- /dev/null
+++ b/cms/src/texascale_custom/__init__.py
@@ -0,0 +1 @@
+default_app_config = 'texascale_custom.apps.TexascaleCustomConfig'
diff --git a/cms/src/texascale_custom/apps.py b/cms/src/texascale_custom/apps.py
new file mode 100644
index 00000000..01d2944b
--- /dev/null
+++ b/cms/src/texascale_custom/apps.py
@@ -0,0 +1,11 @@
+from django.apps import AppConfig
+
+class TexascaleCustomConfig(AppConfig):
+    name = 'texascale_custom'
+    label = 'texascale_custom'
+    verbose_name = 'TACC CMS (Texascale Customizations)'
+
+    def ready(self):
+        from .djangocms_bootstrap4_tabs.extend import extendBootstrap4TabsPlugin
+
+        extendBootstrap4TabsPlugin()
diff --git a/cms/src/texascale_custom/djangocms_bootstrap4_tabs/__init__.py b/cms/src/texascale_custom/djangocms_bootstrap4_tabs/__init__.py
new file mode 100644
index 00000000..e69de29b
diff --git a/cms/src/texascale_custom/djangocms_bootstrap4_tabs/apps.py b/cms/src/texascale_custom/djangocms_bootstrap4_tabs/apps.py
new file mode 100644
index 00000000..8be0f184
--- /dev/null
+++ b/cms/src/texascale_custom/djangocms_bootstrap4_tabs/apps.py
@@ -0,0 +1,7 @@
+from django.apps import AppConfig
+
+
+class DjangocmsBootstrap4TabsConfig(AppConfig):
+    default_auto_field = 'django.db.models.BigAutoField'
+    name = 'texascale_custom.djangocms_bootstrap4_tabs'
+    label = 'texascale_custom_djangocms_bootstrap4_tabs'
\ No newline at end of file
diff --git a/cms/src/texascale_custom/djangocms_bootstrap4_tabs/extend.py b/cms/src/texascale_custom/djangocms_bootstrap4_tabs/extend.py
new file mode 100644
index 00000000..6dad6a4b
--- /dev/null
+++ b/cms/src/texascale_custom/djangocms_bootstrap4_tabs/extend.py
@@ -0,0 +1,68 @@
+import logging
+
+logger = logging.getLogger(f"portal.{__name__}")
+
+def extendBootstrap4TabsPlugin():
+    from django import forms
+    from django.utils.translation import gettext_lazy as _
+
+    from cms.plugin_pool import plugin_pool
+
+    from filer.models import Image
+
+    # djangocms_bootstrap4
+    from djangocms_bootstrap4.contrib.bootstrap4_tabs.cms_plugins import (
+        Bootstrap4TabItemPlugin as OriginalBootstrap4TabItemPlugin
+    )
+    
+    # Import our custom model
+    from .models import Bootstrap4TabItemModel
+
+    class Bootstrap4TabItemForm(forms.ModelForm):
+        class Meta:
+            model = Bootstrap4TabItemModel
+            fields = '__all__'
+            # FilerImageField automatically provides the correct widget!
+
+    class Bootstrap4TabItemPlugin(OriginalBootstrap4TabItemPlugin):
+        model = Bootstrap4TabItemModel
+        form = Bootstrap4TabItemForm
+        name = "Tab Item (supports Image)"
+
+        fieldsets = [
+            (None, {
+                'fields': (
+                    'tab_title',
+                    'tab_image',
+                )
+            }),
+            (_('Advanced settings'), {
+                'classes': ('collapse',),
+                'fields': (
+                    'tag_type',
+                    'attributes',
+                )
+            }),
+        ]
+
+        def render(self, context, instance, placeholder):
+            context = super().render(context, instance, placeholder)
+            is_old_plugin_instance = not hasattr(instance, 'tab_image')
+
+            if is_old_plugin_instance:
+                tab_image = None
+            else:
+                tab_image = instance.tab_image
+
+            context.update({
+                'tab_image': tab_image,
+            })
+
+            return context
+
+    try:
+        plugin_pool.unregister_plugin(OriginalBootstrap4TabItemPlugin)
+    except Exception as e:
+        logger.warning(f"Could not unregister original plugin: {e}")
+    
+    plugin_pool.register_plugin(Bootstrap4TabItemPlugin)
\ No newline at end of file
diff --git a/cms/src/texascale_custom/djangocms_bootstrap4_tabs/migrations/0001_initial.py b/cms/src/texascale_custom/djangocms_bootstrap4_tabs/migrations/0001_initial.py
new file mode 100644
index 00000000..11a7798e
--- /dev/null
+++ b/cms/src/texascale_custom/djangocms_bootstrap4_tabs/migrations/0001_initial.py
@@ -0,0 +1,30 @@
+# Generated by Django 4.2.9 on 2025-08-12 18:25
+
+from django.conf import settings
+from django.db import migrations, models
+import django.db.models.deletion
+import filer.fields.image
+
+
+class Migration(migrations.Migration):
+
+    initial = True
+
+    dependencies = [
+        migrations.swappable_dependency(settings.FILER_IMAGE_MODEL),
+        ('bootstrap4_tabs', '0002_auto_20180610_1106'),
+    ]
+
+    operations = [
+        migrations.CreateModel(
+            name='Bootstrap4TabItemModel',
+            fields=[
+                ('bootstrap4tabitem_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='bootstrap4_tabs.bootstrap4tabitem')),
+                ('tab_image', filer.fields.image.FilerImageField(blank=True, help_text='Optional image to display in the tab title for slideshow navigation', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.FILER_IMAGE_MODEL, verbose_name='Tab Image/Thumbnail')),
+            ],
+            options={
+                'proxy': False,
+            },
+            bases=('bootstrap4_tabs.bootstrap4tabitem',),
+        ),
+    ]
diff --git a/cms/src/texascale_custom/djangocms_bootstrap4_tabs/migrations/__init__.py b/cms/src/texascale_custom/djangocms_bootstrap4_tabs/migrations/__init__.py
new file mode 100644
index 00000000..e69de29b
diff --git a/cms/src/texascale_custom/djangocms_bootstrap4_tabs/models.py b/cms/src/texascale_custom/djangocms_bootstrap4_tabs/models.py
new file mode 100644
index 00000000..a24e9bc6
--- /dev/null
+++ b/cms/src/texascale_custom/djangocms_bootstrap4_tabs/models.py
@@ -0,0 +1,23 @@
+from django.db import models
+from django.utils.translation import gettext_lazy as _
+
+from filer.fields.image import FilerImageField
+
+# djangocms_bootstrap4
+from djangocms_bootstrap4.contrib.bootstrap4_tabs.models import (
+    Bootstrap4TabItem as OriginalBootstrap4TabItem
+)
+
+
+class Bootstrap4TabItemModel(OriginalBootstrap4TabItem):
+    tab_image = FilerImageField(
+        verbose_name=_('Tab Image/Thumbnail'),
+        blank=True,
+        null=True,
+        on_delete=models.SET_NULL,
+        related_name='+',
+        help_text=_('Optional image to display in the tab title for slideshow navigation')
+    )
+
+    class Meta:
+        proxy = False  # CRITICAL: Change from True to False
\ No newline at end of file
diff --git a/cms/src/texascale_custom/djangocms_bootstrap4_tabs/test_templates.py b/cms/src/texascale_custom/djangocms_bootstrap4_tabs/test_templates.py
new file mode 100644
index 00000000..bcbc9097
--- /dev/null
+++ b/cms/src/texascale_custom/djangocms_bootstrap4_tabs/test_templates.py
@@ -0,0 +1,62 @@
+from django.test import TestCase
+from django.template import Context, Template
+from unittest.mock import Mock
+
+class TabsImageTemplateTest(TestCase):
+    def test_tabs_image_template_with_mock_image(self):
+        """The tabs_image template renders correctly with a mock image"""
+
+        mock_image = Mock()
+        mock_image.url = '/media/test-image.jpg'
+        mock_image.default_alt_text = 'Test Alt Text'
+        mock_image.original_filename = 'test-image.jpg'
+        mock_image.width = 100
+        mock_image.height = 50
+
+        template_content = """
+        {% load static %}
+        <img src="{{ instance.url }}"
+            alt="{% if instance.default_alt_text %}{{ instance.default_alt_text }}{% else %}{{ instance.original_filename }}{% endif %}"
+            {% if instance.width %} width="{{ instance.width }}"{% endif %}
+            {% if instance.height %} height="{{ instance.height }}"{% endif %}
+        >
+        """
+        template = Template(template_content)
+
+        context = Context({'instance': mock_image})
+        rendered = template.render(context)
+
+        # The image attributes are rendered correctly
+        self.assertIn('src="/media/test-image.jpg"', rendered)
+        self.assertIn('alt="Test Alt Text"', rendered)
+        self.assertIn('width="100"', rendered)
+        self.assertIn('height="50"', rendered)
+
+    def test_tabs_image_template_without_alt_text(self):
+        """Test that the template falls back to filename when no alt text"""
+
+        mock_image = Mock()
+        mock_image.url = '/media/test-image.jpg'
+        mock_image.default_alt_text = None
+        mock_image.original_filename = 'test-image.jpg'
+        mock_image.width = None
+        mock_image.height = None
+
+        template_content = """
+        <img src="{{ instance.url }}"
+            alt="{% if instance.default_alt_text %}{{ instance.default_alt_text }}{% else %}{{ instance.original_filename }}{% endif %}"
+            {% if instance.width %} width="{{ instance.width }}"{% endif %}
+            {% if instance.height %} height="{{ instance.height }}"{% endif %}
+        >
+        """
+
+        template = Template(template_content)
+        context = Context({'instance': mock_image})
+
+        rendered = template.render(context)
+
+        # Fallback to filename for alt text
+        self.assertIn('alt="test-image.jpg"', rendered)
+        # The width/height are not included when `None`
+        self.assertNotIn('width=', rendered)
+        self.assertNotIn('height=', rendered)
diff --git a/cms/src/texascale_custom/djangocms_bootstrap4_tabs/tests.py b/cms/src/texascale_custom/djangocms_bootstrap4_tabs/tests.py
new file mode 100644
index 00000000..f451e6e6
--- /dev/null
+++ b/cms/src/texascale_custom/djangocms_bootstrap4_tabs/tests.py
@@ -0,0 +1,41 @@
+from django.test import TestCase
+from django.contrib.auth import get_user_model
+
+from .models import Bootstrap4TabItemModel
+
+User = get_user_model()
+
+class Bootstrap4TabItemModelTest(TestCase):
+    def setUp(self):
+        self.user = User.objects.create_superuser(
+            username='admin',
+            email='admin@example.com',
+            password='admin'
+        )
+
+    def test_model_without_image(self):
+        """We can create a Bootstrap4TabItemModel without an image"""
+        tab_item = Bootstrap4TabItemModel.objects.create(
+            tab_title='Test Tab Without Image'
+        )
+
+        self.assertEqual(tab_item.tab_title, 'Test Tab Without Image')
+        self.assertIsNone(tab_item.tab_image)
+
+    def test_model_has_tab_image_field(self):
+        """The model has the tab_image field defined"""
+        tab_item = Bootstrap4TabItemModel()
+        self.assertTrue(hasattr(tab_item, 'tab_image'))
+
+        # The field is a `FilerImageField`
+        field = Bootstrap4TabItemModel._meta.get_field('tab_image')
+        self.assertEqual(field.verbose_name, 'Tab Image/Thumbnail')
+        self.assertTrue(field.blank)
+        self.assertTrue(field.null)
+
+    def test_extend_function_exists(self):
+        """The extend function can be imported and called"""
+        from .extend import extendBootstrap4TabsPlugin
+
+        # Extending plugin raises no exceptions
+        extendBootstrap4TabsPlugin()
